/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/

/* Best way to perform a basic reset using the universal selector */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Setting project-wide font definitions */
body {
  font-family: "Lato", san-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
  /* ^ Padding applied to the entire web page */
}

.header {
  height: 95vh;
  /* ^ I.e., 95% of the viewport height */
  background-image: linear-gradient(
    to right bottom,
    rgba(126, 213, 111, 0.8),
    rgba(40, 180, 131, 0.8)),
  url(../img/hero.jpg);
  /* RGBA - red, green, blue, a (opacity) */
  background-size: cover;
  /* ^ 'cover' will always try to fit the element within the viewport */
  background-position: top;
  /* 'top' will ensure that the top does not get cropped as you change the viewport   */
  /* Similarly, 'center' will crop the top, bottom, and sides to keep the element centered as you change the viewport */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* polygon(x axis y axis, x axis y axis, x axis y axis, x axis y axis), you are essentially controlling the position of the corners...the 'x y' pairs correspond to each corner in a clockwise fashion */
  /* clip-path: polygon(50% 0, 50% 0, 100% 100%, 0 100%); - Triangle */
  /* https://bennettfeely.com/clippy/ */
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
  /* ^ 'top' and 'left' are 'relative' to the parent element, in this case the parent element is the <header> element. So the class for the <header> element must have the property `position: relative` */
}

.logo {
  height: 35px;
  /* If you set the height, the browser will automatically figure out the width, and vice versa */
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* ^ In a way, alters the start position (when position is in relation to another element (in this case the 'header')) of an element from the top left corner to anywhere else within the element (in this application, the element's absolute center) */
  /* ^ I.e., movement in relation to the element itself */
  text-align: center;
  /* button is treated like text since it is 'inline-block', therefore we can center it by setting 'text-align' in its parent element 'text-box' to 'center' */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* backface-visibility: hidden; */
  /* ^ Use in case animation jerks up and down as it completes */
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  /* Block elements occupy the entire width that they have available and they create line breaks after and before themselves */
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* animation-iteration-count: 3; */
  /* animation-delay: 3s; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInRight 1s ease-out;
  /* ^ Same as separately listing out 'animation-name: moveInLeft;' 'animation-duration: 1s;' 'animation-timing-function: ease-out;' */
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  /* ^ Start of animation */
  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
  /* ^ End of animation */
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  /* ^ Start of animation */
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
  /* ^ End of animation */
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  /* Whenever we are trying to add padding/height/width to elements that are already 'inline' we should set the 'display' to 'inline-block' */
  /* border-radius: 100px; */
  transition: all .2s;
  /* ^ Adds light animation (fluidity) to the 'hover' and 'active' pseudo class special states, otherwise the transformations from hovering over, and clicking on, the button will appear jerky and not smooth */
  position: relative;
}
/* ^ 'link' and 'visited' are examples of pseudo classes, pseudo classes are special states of a selector, 'link' and 'visited' are special states of the 'btn' selector */

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 5px 10px rgba(0,0,0,.2);
  /* ^ (x, y, blur, color) */
}

.btn:active {
  transform: translateY(-1px);
}
/* ^ 'active' pseudo class is for when we click on the button */

.btn-white {
  background-color: #fff;
  color: #777;
}

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .4s;
}
/* The ::after selector inserts something after the content of each selected element(s). */

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom .5s ease-out .75s;
  /* ^ animation-delay: .75s */
  animation-fill-mode: backwards;
  /* ^ Automatically applies the styles of the 0% in 'moveInBottom' BEFORE the animation starts */
  /* ^ This, in conjunction with the animation delay above, allows the button animation to occur AFTER the 'heading-primary' animations */
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  /* ^ Start of animation */
  100% {
    opacity: 1;
    transform: translate(0);
  }
  /* ^ End of animation */
}
